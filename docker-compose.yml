version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: ai_chat_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-ai_chat_db}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ai_chat_backend
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-ai_chat_db}
      JWT_SECRET: ${JWT_SECRET}
      JWT_ALGORITHM: HS256
      JWT_EXPIRATION_HOURS: 8
      USE_MOCK_ASKATT: ${USE_MOCK_ASKATT:-true}
      USE_MOCK_ASKDOCS: ${USE_MOCK_ASKDOCS:-true}
      USE_MOCK_AZURE_AD: ${USE_MOCK_AZURE_AD:-true}
      AZURE_TENANT_ID: ${AZURE_TENANT_ID:-mock}
      AZURE_CLIENT_ID: ${AZURE_CLIENT_ID:-mock}
      AZURE_CLIENT_SECRET: ${AZURE_CLIENT_SECRET:-mock}
      ASKATT_API_URL: ${ASKATT_API_URL:-http://mock}
      ASKDOCS_API_URL: ${ASKDOCS_API_URL:-http://mock}
      CORS_ORIGINS: '["http://localhost:3000","http://localhost:80","http://frontend"]'
      DEBUG: ${DEBUG:-false}
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: >
      sh -c "
        alembic upgrade head &&
        python scripts/seed_data.py &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000
      "

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ai_chat_frontend
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:8000}
    ports:
      - "${FRONTEND_PORT:-80}:80"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 3s
      retries: 3

volumes:
  postgres_data:

networks:
  default:
    name: ai_chat_network
